// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  recursive_type_depth        = 5
  previewFeatures             = ["postgresqlExtensions"]
  enable_experimental_decimal = true
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?
  role      UserRole  @default(STANDARD_USER)

  HoseMeasurements      HoseMeasurement[]
  HoseCompatibilityLogs HoseCompatibility[]
  UsageLogs             UsageLog[]
  Questions             Question[]
  Answer                Answer[]
}

model Hose {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  length    Float
  diameter  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  HoseMeasurements    HoseMeasurement[]
  HoseCompatibilities HoseCompatibility[]
  PurchaseOptions     PurchaseOption[]
  UsageLog            UsageLog[]
}

model HoseMeasurement {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  hoseId     String
  userId     String
  measuredAt DateTime @default(now())

  Hose Hose @relation(fields: [hoseId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HoseCompatibility {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  hoseId     String
  userId     String
  compatible Boolean
  checkedAt  DateTime @default(now())
  attachment String

  Hose Hose @relation(fields: [hoseId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageLog {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  hoseId      String
  userId      String
  viewedAt    DateTime @default(now())
  information String

  Hose Hose @relation(fields: [hoseId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PurchaseOption {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  hoseId    String
  platform  String
  price     Float
  currency  String
  available Boolean
  link      String

  Hose Hose @relation(fields: [hoseId], references: [id], onDelete: Cascade)
}

model Question {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  userId    String

  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Answers Answer[]
}

model Answer {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt  DateTime @default(now())
  content    String
  questionId String
  userId     String

  Question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMINISTRATOR
  STANDARD_USER
  GUEST
}

